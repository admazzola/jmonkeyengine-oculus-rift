#summary How to use this project

= Details =

See TestStereoCam.java to see a full example of how to set up an application to use the Oculus Rift. Other test applications may be out of date.

Adding Oculus Rift support to your application:

1. Add the latest jna-x.x.x, jovr-0.x.x.x, guava-x.x.jar & JMonkeyOculusRift.jar to the project.

2. You need to initialize the Rift & replace the GUI node in a static context:
<code language="java">
public static void main(String[] args) {
  MyApp app = new MyApp();

  // these two lines below are important before app starts
  OculusRift.initialize();
  app.guiNode = new OculusGuiNode();

  app.start();
}
</code>

3. Create the OVRAppState that will handle both views & pass the replaced OculusGuiNode as an argument:

<code language="java">
OVRAppState ovrAppState = new OVRAppState((OculusGuiNode)guiNode);
stateManager.attach(ovrAppState);
</code>

4. To add basic HMD sensing:

<code language="java">
Spatial observer = new Node("Observer");
observer.addControl(ovrAppState.getCameraControl());
rootNode.attachChild(observer);
</code>

= Using the GUI =

The GUI system has two options: automatic & manual positioning. Automatic positioning will always keep the GUI elements floating infront of the view, while manual will let you set its position manually, where it will stay as the player moves their head. The default is manual positioning.

You can change options like so:

<code language="java">          OculusRift.getAppState().getGuiNode().setPositioningMode(POSITIONING_MODE.AUTO);
OculusRift.getAppState().getGuiNode().setGuiDistance(0.8f);
</code>

To set the GUI's position manually, where it will stay until another manual position update is called (as long as the positioning mode is set to MANUAL):

<code language="java">
OculusRift.getAppState().getGuiNode().positionGui();
</code>

The OculusGuiNode will try and keep things in the "Translucent" render bucket. If something ends up in the "Gui" bucket, you will need to call fixBrokenElements() to convert them to "Translucent".

It should be safe to have all of the children of the root OculusGuiNode also be OculusGuiNodes.

The OculusGuiNode will operate as a normal node if the Oculus isn't initialized. For testing purposes without an Oculus Rift, you can call OculusRift.forceInitializeSuccess() to make everything (e.g. the OculusGuiNode) act like one was initialized successfully.